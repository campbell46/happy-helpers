//////////////////////
// Profile Page
//////////////////////

import Head from "next/head";
import { useEffect, useState } from 'react';
import prisma from "../../../prisma/.db";

// Component dependencies
import NavBar from "@/components/NavBar";
import Footer from "@/components/Footer";
import TaskList from "@/components/TaskList";
import EditProfileForm from "@/components/EditProfileForm";

// Helper function dependencies
import addCoordsToTasks from "@/helpers/add-coords-to-tasks";
import addCoordsToUser from "@/helpers/add-coords-to-user";
import addDistanceToTasks from "@/helpers/add-distance-to-tasks";
import ProfileTaskRow from "@/components/ProfileTaskRow";
import ProfileSidebar from "@/components/ProfileSidebar";

export default function ProfilePage({ user, userAddress, userOrganizations, upcomingData, pastData, loggedInUser }) {
  // HOOKS
  const [userData, setUserData] = useState(user);
  console.log(userData);

  const [showEditProfileForm, setShowEditProfileForm] = useState(false);
  const [editProfileFormData, setEditProfileFormData] = useState({
    firstName: userData.firstName,
    lastName: userData.lastName,
    description: userData.description,
    email: userData.email,
    phone: userData.phone,
    address: userData.address.address,
    city: userData.address.city,
    postcode: userData.address.postcode,
    skills: userData.skills,
    // organizations: userData.organizations,
  });

  console.log(upcomingData);
  console.log(pastData);
  const [upcomingTasksData, setUpcomingTasksData] = useState(upcomingData);
  const [pastTasksData, setPastTasksData] = useState(pastData);

  // HELPER FUNCTIONS
  const toggleEditProfileForm = () => {
    setShowEditProfileForm(!showEditProfileForm);
  };

  // let [orgString, setOrgString] = useState("");
  // useEffect(() => {
  //   let orgStr = "";
  //   userOrganizations.forEach((org, index) => {
  //     if (userOrganizations.length - 1 === index) {
  //       orgStr += `${org.name}.`;
  //     } else {
  //       orgStr += `${org.name}, `;
  //     }
  //   });
  //   setOrgString(orgStr);
  // }, [userOrganizations]);

  // ROWS 
  const[selectedId, setSelectedId] = useState(null)
  const setScroll = (id, rowType) => {
    setTimeout(function () {
      console.log("ID IS:", id)
      if (!selectedId) {
        return
      }
      
      if (typeof window !== "undefined") {
        const scrollBox = document.querySelector(`#scrollbox${rowType}`);
        const scrollPos = document.querySelector(`#${id}`).offsetLeft;
        
        scrollBox.scrollLeft = (scrollPos - 200);
        console.log(scrollPos)
        console.log(scrollBox.scrollLeft)
      }
    }, 100);
  }
  
  

  // TEMPLATE

  
  return (
    <>
      <Head>
        <title>Happy Helpers</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <NavBar name={loggedInUser.firstName} id={userData.id}/>
        <div className="flex w-[100%]">
          <div className="sticky top-0">
          <ProfileSidebar userData={userData} showEditProfileForm={showEditProfileForm} toggleEditProfileForm={toggleEditProfileForm} editProfileFormData={editProfileFormData} setEditProfileFormData={setEditProfileFormData}/>
          </div>
          <div className="flex flex-col w-[100%] ml-4 overflow-hidden">
          <section >
          <h1 className="uppercase text-teal-600 px-10 font-bold text-2xl">Your Upcoming Tasks:</h1>
             <h1 className="uppercase text-teal-600 px-10 font-bold t-lg">{upcomingTasksData.length} Available</h1>

            <ProfileTaskRow rowType="upcoming" tasks={upcomingTasksData}  selectedId={selectedId} setSelectedId={setSelectedId} setScroll={setScroll}/>

          </section>
          <section className="pt-4">
            <h1 className="uppercase text-teal-600 px-10 font-bold text-2xl">Your Past Tasks:</h1>
             <h1 className="uppercase text-teal-600 px-10 font-bold t-lg">{pastTasksData.length} Available</h1>
          <ProfileTaskRow rowType="past" tasks={pastTasksData}  selectedId={selectedId} setSelectedId={setSelectedId} setScroll={setScroll}/>

          </section>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
}

// DATA FETCHING
export async function getServerSideProps(context) {

  //////// User table user profile data /////////

  // Get url slug for profile page dynamically from url to be used as userId.
  const { id } = context.query;
  // Get user table profile data and include address data
  const user = await prisma.user.findUnique({
    where: {
      id: parseInt(id)
    },
    include: {
      address: true,
      // Organizations: true,
    }
  });

  //logged in user
  const loggedInUser = await prisma.user.findUnique({
    where: {
      id: 1
    }
  });

  ///////// Task table user profile data /////////

  // Get tasks where offer is complete for userId
  const userPastOffersComplete = await prisma.offer.findMany({
    where: {
      userId: parseInt(user.id),
      status: 'ACCEPTED'
    },
    include: {
      task: {
        include: {
          address: true
        }
      }
    }
  });

  // Get all tasks data for user based on offers complete for the user
  const tasksData = userPastOffersComplete.map((item) => {
    return item.task;
  });
  
  // console.log(tasksData);
  // console.log(user)
  const addresses = await prisma.address.findMany();

  // Add city, latitude, longitude to tasksData
  addCoordsToTasks(tasksData, addresses);

  // Add city, latitude, longitude to user
  addCoordsToUser(user, addresses);

  // Add distance to tasksData
  addDistanceToTasks(tasksData, user);

  // console.log(tasksData);
  // console.log(user)

  
  // Extract upcoming tasks data
  const upcomingData = tasksData.filter(item => {
    return item.status === 'PENDING';
  });
  // console.log(upcomingData, 'upcomingData');

  // Extract past tasks data
  const pastData = tasksData.filter(item => {
    return item.status === 'COMPLETE';
  });
  // console.log(pastData, 'pastData');

  return {
    props: {
      user: JSON.parse(JSON.stringify(user)),
      loggedInUser: JSON.parse(JSON.stringify(loggedInUser)),
      userAddress: JSON.parse(JSON.stringify(user.address)),
      upcomingData: JSON.parse(JSON.stringify(upcomingData)),
      pastData: JSON.parse(JSON.stringify(pastData)),
    }
  };
}